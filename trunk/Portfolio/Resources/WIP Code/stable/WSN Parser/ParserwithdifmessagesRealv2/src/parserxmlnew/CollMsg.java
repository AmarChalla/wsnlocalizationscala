/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CollMsg'
 * message type.
 */

package parserxmlnew;

public class CollMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 12;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 147;

    /** Create a new CollMsg of size 12. */
    public CollMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CollMsg of the given data_length. */
    public CollMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollMsg with the given data_length
     * and base offset.
     */
    public CollMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollMsg using the given byte array
     * as backing store.
     */
    public CollMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CollMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CollMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollMsg embedded in the given message
     * at the given base offset.
     */
    public CollMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollMsg embedded in the given message
     * at the given base offset and length.
     */
    public CollMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CollMsg> \n";
      try {
        s += "  [moteid=0x"+Long.toHexString(get_moteid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [battery=0x"+Long.toHexString(get_battery())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lightreading=0x"+Long.toHexString(get_lightreading())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tempreading=0x"+Long.toHexString(get_tempreading())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidityreading=0x"+Long.toHexString(get_humidityreading())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [button=0x"+Long.toHexString(get_button())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: moteid
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'moteid' is signed (true).
     */
    public static boolean isSigned_moteid() {
        return true;
    }

    /**
     * Return whether the field 'moteid' is an array (false).
     */
    public static boolean isArray_moteid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'moteid'
     */
    public static int offset_moteid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'moteid'
     */
    public static int offsetBits_moteid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'moteid'
     */
    public int get_moteid() {
        return (int)getUIntBEElement(offsetBits_moteid(), 16);
    }

    /**
     * Set the value of the field 'moteid'
     */
    public void set_moteid(int value) {
        setUIntBEElement(offsetBits_moteid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'moteid'
     */
    public static int size_moteid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'moteid'
     */
    public static int sizeBits_moteid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, signed
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (true).
     */
    public static boolean isSigned_type() {
        return true;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: battery
    //   Field type: int, signed
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'battery' is signed (true).
     */
    public static boolean isSigned_battery() {
        return true;
    }

    /**
     * Return whether the field 'battery' is an array (false).
     */
    public static boolean isArray_battery() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'battery'
     */
    public static int offset_battery() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'battery'
     */
    public static int offsetBits_battery() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'battery'
     */
    public int get_battery() {
        return (int)getUIntBEElement(offsetBits_battery(), 16);
    }

    /**
     * Set the value of the field 'battery'
     */
    public void set_battery(int value) {
        setUIntBEElement(offsetBits_battery(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'battery'
     */
    public static int size_battery() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'battery'
     */
    public static int sizeBits_battery() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lightreading
    //   Field type: int, signed
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lightreading' is signed (true).
     */
    public static boolean isSigned_lightreading() {
        return true;
    }

    /**
     * Return whether the field 'lightreading' is an array (false).
     */
    public static boolean isArray_lightreading() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lightreading'
     */
    public static int offset_lightreading() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lightreading'
     */
    public static int offsetBits_lightreading() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'lightreading'
     */
    public int get_lightreading() {
        return (int)getUIntBEElement(offsetBits_lightreading(), 16);
    }

    /**
     * Set the value of the field 'lightreading'
     */
    public void set_lightreading(int value) {
        setUIntBEElement(offsetBits_lightreading(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'lightreading'
     */
    public static int size_lightreading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lightreading'
     */
    public static int sizeBits_lightreading() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tempreading
    //   Field type: int, signed
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tempreading' is signed (true).
     */
    public static boolean isSigned_tempreading() {
        return true;
    }

    /**
     * Return whether the field 'tempreading' is an array (false).
     */
    public static boolean isArray_tempreading() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tempreading'
     */
    public static int offset_tempreading() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tempreading'
     */
    public static int offsetBits_tempreading() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'tempreading'
     */
    public int get_tempreading() {
        return (int)getUIntBEElement(offsetBits_tempreading(), 16);
    }

    /**
     * Set the value of the field 'tempreading'
     */
    public void set_tempreading(int value) {
        setUIntBEElement(offsetBits_tempreading(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'tempreading'
     */
    public static int size_tempreading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tempreading'
     */
    public static int sizeBits_tempreading() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidityreading
    //   Field type: int, signed
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidityreading' is signed (true).
     */
    public static boolean isSigned_humidityreading() {
        return true;
    }

    /**
     * Return whether the field 'humidityreading' is an array (false).
     */
    public static boolean isArray_humidityreading() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humidityreading'
     */
    public static int offset_humidityreading() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidityreading'
     */
    public static int offsetBits_humidityreading() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'humidityreading'
     */
    public int get_humidityreading() {
        return (int)getUIntBEElement(offsetBits_humidityreading(), 16);
    }

    /**
     * Set the value of the field 'humidityreading'
     */
    public void set_humidityreading(int value) {
        setUIntBEElement(offsetBits_humidityreading(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humidityreading'
     */
    public static int size_humidityreading() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humidityreading'
     */
    public static int sizeBits_humidityreading() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: button
    //   Field type: byte, signed
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'button' is signed (true).
     */
    public static boolean isSigned_button() {
        return true;
    }

    /**
     * Return whether the field 'button' is an array (false).
     */
    public static boolean isArray_button() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'button'
     */
    public static int offset_button() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'button'
     */
    public static int offsetBits_button() {
        return 88;
    }

    /**
     * Return the value (as a byte) of the field 'button'
     */
    public byte get_button() {
        return (byte)getSIntBEElement(offsetBits_button(), 8);
    }

    /**
     * Set the value of the field 'button'
     */
    public void set_button(byte value) {
        setSIntBEElement(offsetBits_button(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'button'
     */
    public static int size_button() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'button'
     */
    public static int sizeBits_button() {
        return 8;
    }

}
